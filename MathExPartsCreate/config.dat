Abs
sbyte short int long float double decimal
/////
    /// <summary>
    /// Returns absolute value of {TYPE} <paramref name="value"/>.
    /// </summary>
    public static {TYPE} Abs({TYPE} value)
    {
        checked
        {
            return value >= 0 ? value : ({TYPE})-value;
        }
    }
/////

Abs
byte ushort uint ulong
/////
    /// <summary>
    /// Returns absolute value of {TYPE} <paramref name="value"/>.
    /// </summary>
    public static {TYPE} Abs({TYPE} value)
    {
		return value;
    }
/////

Min
byte sbyte short ushort int uint long ulong float double decimal
/////
    /// <summary>
    /// Returns minimum of specified <paramref name="values"/>.
    /// </summary>
    public static {TYPE} Min(params {TYPE}[] values)
    {
		if(values == null) throw new ArgumentNullException("values");
		if(values.Empty()) throw new InvalidOperationException("Minimum of zero values isn't defined");
		
        return values.Min();
    }
/////

Max
byte sbyte short ushort int uint long ulong float double decimal
/////
    /// <summary>
    /// Returns maximum of specified <paramref name="values"/>.
    /// </summary>
    public static {TYPE} Max(params {TYPE}[] values)
    {
		if(values == null) throw new ArgumentNullException("values");
		if(values.Empty()) throw new InvalidOperationException("Maximum of zero values isn't defined");
		
        return values.Max();
    }
/////

Lerp
float double
/////
    /// <summary>
    /// Linear interpolation: <paramref name="left"/> + (<paramref name="right"/> - <paramref name="left"/>) * <paramref name="frac"/>.
    /// </summary>
    public static {TYPE} Lerp({TYPE} left, {TYPE} right, {TYPE} frac)
    {
        return left + (right - left) * frac;
    }
/////

IsPrime
short ushort int uint long ulong
/////
    /// <summary>
    /// Tests whether the <paramref name="number"/> is prime.
	/// It takes about 1 ms for numbers near int.MaxValue and some minutes for numbers near long.MaxValue on my laptop.
    /// </summary>
    public static bool IsPrime({TYPE} number)
    {
        if (number <= 1) return false;
        if (number == 2) return true;
        if (number % 2 == 0) return false;

        {TYPE} max = ({TYPE})(Math.Sqrt(number) + 1);
        for ({TYPE} i = 3; i < max; i += 2)
        {
            if (number % i == 0) return false;
        }

        return true;
    }
/////

Gcd
short int long
/////
    /// <summary>
    /// Returns greatest common divisor of <paramref name="a"/> and <paramref name="b"/>.
    /// </summary>
    public static {TYPE} Gcd({TYPE} a, {TYPE} b)
    {
        if (a == 0 && b == 0) throw new InvalidOperationException("Gcd isn't defined for two zeroes.");
		
        if (a < 0 || b < 0) return Gcd(Abs(a), Abs(b)); // Gcd(a, b) == Gcd(|a|,|b|)
		
		// Gcd of 0 and another number is the absolute value of this number
        if (a == 0) return b;		
        if (b == 0) return a;		

        while (b != 0) b = ({TYPE})(a % (a = b));
        return a;
    }

    /// <summary>
    /// Returns greatest common divisor of <paramref name="values"/>.
    /// </summary>
    public static {TYPE} Gcd(params {TYPE}[] values)
    {
        if (values == null) throw new ArgumentNullException("values");
        if (values.Length == 0) throw new InvalidOperationException("Cannot calculate Gcd for 0 elements.");
		
		if(values.Length == 1) {
			if(values.Single() == 0) throw new InvalidOperationException("Gcd isn't defined for single zero.");
			else return Abs(values.Single());
		}

        return values.Aggregate(Gcd);
    }

    /// <summary>
    /// Returns greatest common divisor of <paramref name="values"/>.
    /// </summary>
    public static {TYPE} Gcd(IEnumerable<{TYPE}> values)
    {
        if (values == null) throw new ArgumentNullException("values");

        return Gcd(values.ToArray());
    }
/////

Gcd
ushort uint ulong
/////
    /// <summary>
    /// Returns greatest common divisor of <paramref name="a"/> and <paramref name="b"/>.
    /// </summary>
    public static {TYPE} Gcd({TYPE} a, {TYPE} b)
    {
        if (a == 0 && b == 0) throw new InvalidOperationException("Gcd isn't defined for two zeroes.");
		
		// Gcd of 0 and another number is the absolute value of this number
        if (a == 0) return b;		
        if (b == 0) return a;		

        while (b != 0) b = ({TYPE})(a % (a = b));
        return a;
    }

    /// <summary>
    /// Returns greatest common divisor of <paramref name="values"/>.
    /// </summary>
    public static {TYPE} Gcd(params {TYPE}[] values)
    {
        if (values == null) throw new ArgumentNullException("values");
        if (values.Length == 0) throw new InvalidOperationException("Cannot calculate Gcd for 0 elements.");
		
		if(values.Length == 1) {
			if(values.Single() == 0) throw new InvalidOperationException("Gcd isn't defined for single zero.");
			else return values.Single();
		}

        return values.Aggregate(Gcd);
    }

    /// <summary>
    /// Returns greatest common divisor of <paramref name="values"/>.
    /// </summary>
    public static {TYPE} Gcd(IEnumerable<{TYPE}> values)
    {
        if (values == null) throw new ArgumentNullException("values");

        return Gcd(values.ToArray());
    }
/////

Lcm
short int long
/////
    /// <summary>
    /// Returns least common multiplier of <paramref name="a"/> and <paramref name="b"/>.
    /// </summary>
    public static {TYPE} Lcm({TYPE} a, {TYPE} b)
    {
		if(a == 0 || b == 0) throw new InvalidOperationException("Lcm isn't defined for a == 0 or b == 0.");
        checked
        {
            return ({TYPE})Abs(a / Gcd(a, b) * b);
        }
    }

    /// <summary>
    /// Returns least common multiplier of <paramref name="values"/>.
    /// </summary>
    public static {TYPE} Lcm(params {TYPE}[] values)
    {
        if (values == null) throw new ArgumentNullException("values");
        if (values.Length == 0) throw new InvalidOperationException("Cannot calculate Lcm for 0 elements.");
		
		if(values.Length == 1) {
			if(values.Single() == 0) throw new InvalidOperationException("Lcm isn't defined for single zero.");
			else return Abs(values.Single());
		}

        return values.Aggregate(Lcm);
    }

    /// <summary>
    /// Returns greatest common divisor of <paramref name="values"/>.
    /// </summary>
    public static {TYPE} Lcm(IEnumerable<{TYPE}> values)
    {
        if (values == null) throw new ArgumentNullException("values");

        return Gcd(values.ToArray());
    }
/////

Lcm
ushort uint ulong
/////
    /// <summary>
    /// Returns least common multiplier of <paramref name="a"/> and <paramref name="b"/>.
    /// </summary>
    public static {TYPE} Lcm({TYPE} a, {TYPE} b)
    {
		if(a == 0 || b == 0) throw new InvalidOperationException("Lcm isn't defined for a == 0 or b == 0.");
        checked
        {
            return ({TYPE})(a / Gcd(a, b) * b);
        }
    }

    /// <summary>
    /// Returns least common multiplier of <paramref name="values"/>.
    /// </summary>
    public static {TYPE} Lcm(params {TYPE}[] values)
    {
        if (values == null) throw new ArgumentNullException("values");
        if (values.Length == 0) throw new InvalidOperationException("Cannot calculate Lcm for 0 elements.");
		
		if(values.Length == 1) {
			if(values.Single() == 0) throw new InvalidOperationException("Lcm isn't defined for single zero.");
			else return values.Single();
		}

        return values.Aggregate(Lcm);
    }

    /// <summary>
    /// Returns greatest common divisor of <paramref name="values"/>.
    /// </summary>
    public static {TYPE} Lcm(IEnumerable<{TYPE}> values)
    {
        if (values == null) throw new ArgumentNullException("values");

        return Gcd(values.ToArray());
    }
/////