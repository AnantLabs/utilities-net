// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

public partial class CommonUtilsTest
{
[TestMethod]
[PexGeneratedBy(typeof(global::CommonUtilsTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TryThrowsArgumentNullException371()
{
    int i;
    i = this.Try<int>((Func<int>)null, 0, (Type[])null);
}
[TestMethod]
[PexGeneratedBy(typeof(global::CommonUtilsTest))]
public void Try968()
{
    object o;
    int i;
    o = FuncFactory.Create(false, false, 0);
    i = this.Try<int>((Func<int>)o, 0, (Type[])null);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(global::CommonUtilsTest))]
public void Try96801()
{
    object o;
    int i;
    o = FuncFactory.Create(true, false, 0);
    i = this.Try<int>((Func<int>)o, 0, (Type[])null);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(global::CommonUtilsTest))]
public void Try96802()
{
    object o;
    int i;
    o = FuncFactory.Create(true, true, 0);
    i = this.Try<int>((Func<int>)o, 0, (Type[])null);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(global::CommonUtilsTest))]
public void Try627()
{
    object o;
    int i;
    o = FuncFactory.Create(false, false, 0);
    Type[] types = new Type[0];
    i = this.Try<int>((Func<int>)o, 0, types);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(global::CommonUtilsTest))]
[ExpectedException(typeof(ArgumentException))]
public void TryThrowsArgumentException795()
{
    object o;
    int i;
    o = FuncFactory.Create(false, false, 0);
    Type[] types = new Type[1];
    i = this.Try<int>((Func<int>)o, 0, types);
}
[TestMethod]
[PexGeneratedBy(typeof(global::CommonUtilsTest))]
[ExpectedException(typeof(OperationCanceledException))]
public void TryThrowsOperationCanceledException706()
{
    object o;
    int i;
    o = FuncFactory.Create(true, false, 0);
    Type[] types = new Type[0];
    i = this.Try<int>((Func<int>)o, 0, types);
}
[TestMethod]
[PexGeneratedBy(typeof(global::CommonUtilsTest))]
[ExpectedException(typeof(NullReferenceException))]
public void TryThrowsNullReferenceException385()
{
    object o;
    int i;
    o = FuncFactory.Create(true, true, 0);
    Type[] types = new Type[0];
    i = this.Try<int>((Func<int>)o, 0, types);
}
}
