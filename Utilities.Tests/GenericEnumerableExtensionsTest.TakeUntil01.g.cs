// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

public partial class GenericEnumerableExtensionsTest
{
[TestMethod]
[PexGeneratedBy(typeof(global::GenericEnumerableExtensionsTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TakeUntil01ThrowsArgumentNullException259()
{
    IEnumerable<int> iEnumerable;
    iEnumerable =
      this.TakeUntil01<int>((IEnumerable<int>)null, (Func<int, int, bool>)null);
}
[TestMethod]
[PexGeneratedBy(typeof(global::GenericEnumerableExtensionsTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TakeUntil01ThrowsArgumentNullException391()
{
    IEnumerable<int> iEnumerable;
    int[] ints = new int[0];
    iEnumerable =
      this.TakeUntil01<int>((IEnumerable<int>)ints, (Func<int, int, bool>)null);
}
[TestMethod]
[PexGeneratedBy(typeof(global::GenericEnumerableExtensionsTest))]
public void TakeUntil01561()
{
    object o;
    IEnumerable<int> iEnumerable;
    o = FuncFactory.Create(0, false);
    int[] ints = new int[0];
    iEnumerable =
      this.TakeUntil01<int>((IEnumerable<int>)ints, (Func<int, int, bool>)o);
    Assert.IsNotNull((object)iEnumerable);
}
[TestMethod]
[PexGeneratedBy(typeof(global::GenericEnumerableExtensionsTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TakeUntilThrowsArgumentNullException511()
{
    IEnumerable<int> iEnumerable;
    iEnumerable = this.TakeUntil<int>((IEnumerable<int>)null, (Func<int, bool>)null);
}
[TestMethod]
[PexGeneratedBy(typeof(global::GenericEnumerableExtensionsTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void TakeUntilThrowsArgumentNullException463()
{
    IEnumerable<int> iEnumerable;
    int[] ints = new int[0];
    iEnumerable = this.TakeUntil<int>((IEnumerable<int>)ints, (Func<int, bool>)null);
}
[TestMethod]
[PexGeneratedBy(typeof(global::GenericEnumerableExtensionsTest))]
public void TakeUntil915()
{
    object o;
    IEnumerable<int> iEnumerable;
    o = FuncFactory.Create(false);
    int[] ints = new int[0];
    iEnumerable = this.TakeUntil<int>((IEnumerable<int>)ints, (Func<int, bool>)o);
    Assert.IsNotNull((object)iEnumerable);
}
}
