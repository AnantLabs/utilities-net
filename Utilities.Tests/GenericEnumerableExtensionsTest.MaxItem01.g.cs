// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

public partial class GenericEnumerableExtensionsTest
{
[TestMethod]
[PexGeneratedBy(typeof(global::GenericEnumerableExtensionsTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void MaxItem01ThrowsArgumentNullException805()
{
    int i;
    i = this.MaxItem01<int, int>((IEnumerable<int>)null);
}
[TestMethod]
[PexGeneratedBy(typeof(global::GenericEnumerableExtensionsTest))]
[ExpectedException(typeof(InvalidOperationException))]
public void MaxItem01ThrowsInvalidOperationException405()
{
    int i;
    int[] ints = new int[0];
    i = this.MaxItem01<int, int>((IEnumerable<int>)ints);
}
[TestMethod]
[PexGeneratedBy(typeof(global::GenericEnumerableExtensionsTest))]
public void MaxItem01348()
{
    int i;
    int[] ints = new int[1];
    i = this.MaxItem01<int, int>((IEnumerable<int>)ints);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(global::GenericEnumerableExtensionsTest))]
public void MaxItem01446()
{
    int i;
    int[] ints = new int[2];
    i = this.MaxItem01<int, int>((IEnumerable<int>)ints);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(global::GenericEnumerableExtensionsTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void MaxItemThrowsArgumentNullException756()
{
    int i;
    i = this.MaxItem<int, int>((IEnumerable<int>)null, (Func<int, int>)null);
}
[TestMethod]
[PexGeneratedBy(typeof(global::GenericEnumerableExtensionsTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void MaxItemThrowsArgumentNullException632()
{
    int i;
    int[] ints = new int[0];
    i = this.MaxItem<int, int>((IEnumerable<int>)ints, (Func<int, int>)null);
}
[TestMethod]
[PexGeneratedBy(typeof(global::GenericEnumerableExtensionsTest))]
[ExpectedException(typeof(InvalidOperationException))]
public void MaxItemThrowsInvalidOperationException328()
{
    object o;
    int i;
    o = FuncFactory.Create();
    int[] ints = new int[0];
    i = this.MaxItem<int, int>((IEnumerable<int>)ints, (Func<int, int>)o);
}
[TestMethod]
[PexGeneratedBy(typeof(global::GenericEnumerableExtensionsTest))]
public void MaxItem937()
{
    object o;
    int i;
    o = FuncFactory.Create();
    int[] ints = new int[1];
    i = this.MaxItem<int, int>((IEnumerable<int>)ints, (Func<int, int>)o);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(global::GenericEnumerableExtensionsTest))]
public void MaxItem364()
{
    object o;
    int i;
    o = FuncFactory.Create();
    int[] ints = new int[2];
    i = this.MaxItem<int, int>((IEnumerable<int>)ints, (Func<int, int>)o);
    Assert.AreEqual<int>(0, i);
}
}
