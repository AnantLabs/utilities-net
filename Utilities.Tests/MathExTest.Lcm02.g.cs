// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Framework.Exceptions;

public partial class MathExTest
{
[TestMethod]
[PexGeneratedBy(typeof(global::MathExTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void Lcm02ThrowsArgumentNullException333()
{
    short w;
    w = this.Lcm02((short[])null);
}
[TestMethod]
[PexGeneratedBy(typeof(global::MathExTest))]
[ExpectedException(typeof(InvalidOperationException))]
public void Lcm02ThrowsInvalidOperationException366()
{
    short w;
    short[] ws = new short[0];
    w = this.Lcm02(ws);
}
[TestMethod]
[PexGeneratedBy(typeof(global::MathExTest))]
[ExpectedException(typeof(InvalidOperationException))]
public void Lcm02ThrowsInvalidOperationException636()
{
    short w;
    short[] ws = new short[1];
    w = this.Lcm02(ws);
}
[TestMethod]
[PexGeneratedBy(typeof(global::MathExTest))]
public void Lcm02381()
{
    short w;
    short[] ws = new short[1];
    ws[0] = (short)33;
    w = this.Lcm02(ws);
    Assert.AreEqual<short>((short)33, w);
}
[TestMethod]
[PexGeneratedBy(typeof(global::MathExTest))]
[ExpectedException(typeof(InvalidOperationException))]
public void Lcm02ThrowsInvalidOperationException431()
{
    short w;
    short[] ws = new short[2];
    w = this.Lcm02(ws);
}
[TestMethod]
[PexGeneratedBy(typeof(global::MathExTest))]
[ExpectedException(typeof(InvalidOperationException))]
public void Lcm02ThrowsInvalidOperationException142()
{
    short w;
    short[] ws = new short[2];
    ws[0] = (short)33;
    w = this.Lcm02(ws);
}
[TestMethod]
[PexGeneratedBy(typeof(global::MathExTest))]
[ExpectedException(typeof(OverflowException))]
public void Lcm02ThrowsOverflowException649()
{
    short w;
    short[] ws = new short[2];
    ws[0] = (short)short.MinValue;
    ws[1] = (short)33;
    w = this.Lcm02(ws);
}
[TestMethod]
[PexGeneratedBy(typeof(global::MathExTest))]
[ExpectedException(typeof(OverflowException))]
public void Lcm02ThrowsOverflowException241()
{
    short w;
    short[] ws = new short[2];
    ws[0] = (short)33;
    ws[1] = (short)short.MinValue;
    w = this.Lcm02(ws);
}
[TestMethod]
[PexGeneratedBy(typeof(global::MathExTest))]
public void Lcm02634()
{
    short w;
    short[] ws = new short[2];
    ws[0] = (short)106;
    ws[1] = (short)53;
    w = this.Lcm02(ws);
    Assert.AreEqual<short>((short)106, w);
}
[TestMethod]
[PexGeneratedBy(typeof(global::MathExTest))]
public void Lcm02623()
{
    short w;
    short[] ws = new short[1];
    ws[0] = (short)(-9);
    w = this.Lcm02(ws);
    Assert.AreEqual<short>((short)9, w);
}
[TestMethod]
[PexGeneratedBy(typeof(global::MathExTest))]
[ExpectedException(typeof(OverflowException))]
public void Lcm02ThrowsOverflowException209()
{
    short w;
    short[] ws = new short[2];
    ws[0] = (short)16386;
    ws[1] = (short)(-4);
    w = this.Lcm02(ws);
}
[TestMethod]
[PexGeneratedBy(typeof(global::MathExTest))]
public void Lcm02483()
{
    short w;
    short[] ws = new short[3];
    ws[0] = (short)106;
    ws[1] = (short)53;
    ws[2] = (short)32;
    w = this.Lcm02(ws);
    Assert.AreEqual<short>((short)1696, w);
}
[TestMethod]
[PexGeneratedBy(typeof(global::MathExTest))]
[ExpectedException(typeof(OverflowException))]
public void Lcm02ThrowsOverflowException932()
{
    short w;
    short[] ws = new short[2];
    ws[0] = (short)(-9);
    ws[1] = (short)short.MinValue;
    w = this.Lcm02(ws);
}
[TestMethod]
[PexGeneratedBy(typeof(global::MathExTest))]
[ExpectedException(typeof(OverflowException))]
public void Lcm02ThrowsOverflowException457()
{
    short w;
    short[] ws = new short[2];
    ws[0] = (short)(-15678);
    ws[1] = (short)(-21);
    w = this.Lcm02(ws);
}
[TestMethod]
[PexGeneratedBy(typeof(global::MathExTest))]
[ExpectedException(typeof(OverflowException))]
public void Lcm02ThrowsOverflowException204()
{
    short w;
    short[] ws = new short[4];
    ws[0] = (short)106;
    ws[1] = (short)53;
    ws[2] = (short)(-1);
    ws[3] = (short)short.MinValue;
    w = this.Lcm02(ws);
}
[TestMethod]
[PexGeneratedBy(typeof(global::MathExTest))]
public void Lcm02968()
{
    short w;
    short[] ws = new short[4];
    ws[0] = (short)106;
    ws[1] = (short)53;
    ws[2] = (short)(-1);
    ws[3] = (short)(-1);
    w = this.Lcm02(ws);
    Assert.AreEqual<short>((short)106, w);
}
}
