// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Framework;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Exceptions;

public partial class StringUtilsTest
{
[TestMethod]
[PexGeneratedBy(typeof(global::StringUtilsTest))]
public void FormatNamed998()
{
    using (IPexObserveContext observer = PexObserve.NewTest())
    {
      global::StringUtilsTest.FormatNamed((string)null, (string)null);
      string ovformatNamed = observer.GetObservedValue<string>("formatNamed");
      Assert.AreEqual<string>("{a}", ovformatNamed);
      string ovformat = observer.GetObservedValue<string>("format");
      Assert.AreEqual<string>("{0}", ovformat);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(global::StringUtilsTest))]
public void FormatNamed348()
{
    using (IPexObserveContext observer = PexObserve.NewTest())
    {
      global::StringUtilsTest.FormatNamed((string)null, "");
      string ovformatNamed = observer.GetObservedValue<string>("formatNamed");
      Assert.AreEqual<string>("{a}", ovformatNamed);
      string ovformat = observer.GetObservedValue<string>("format");
      Assert.AreEqual<string>("{0}", ovformat);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(global::StringUtilsTest))]
public void FormatNamed93()
{
    using (IPexObserveContext observer = PexObserve.NewTest())
    {
      global::StringUtilsTest.FormatNamed((string)null, "\0");
      string ovformatNamed = observer.GetObservedValue<string>("formatNamed");
      Assert.AreEqual<string>("{a}\0", ovformatNamed);
      string ovformat = observer.GetObservedValue<string>("format");
      Assert.AreEqual<string>("{0}\0", ovformat);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(global::StringUtilsTest))]
[PexRaisedException(typeof(PexAssertFailedException))]
public void FormatNamedThrowsPexAssertFailedException537()
{
    using (IPexObserveContext observer = PexObserve.NewTest())
    {
      global::StringUtilsTest.FormatNamed((string)null, "{");
      string ovformatNamed = observer.GetObservedValue<string>("formatNamed");
      Assert.AreEqual<string>("{a}{", ovformatNamed);
      string ovformat = observer.GetObservedValue<string>("format");
      Assert.AreEqual<string>("{0}{", ovformat);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(global::StringUtilsTest))]
public void FormatNamed825()
{
    using (IPexObserveContext observer = PexObserve.NewTest())
    {
      global::StringUtilsTest.FormatNamed("", (string)null);
      string ovformatNamed = observer.GetObservedValue<string>("formatNamed");
      Assert.AreEqual<string>("{a}", ovformatNamed);
      string ovformat = observer.GetObservedValue<string>("format");
      Assert.AreEqual<string>("{0}", ovformat);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(global::StringUtilsTest))]
public void FormatNamed689()
{
    using (IPexObserveContext observer = PexObserve.NewTest())
    {
      global::StringUtilsTest.FormatNamed("{", (string)null);
      string ovformatNamed = observer.GetObservedValue<string>("formatNamed");
      Assert.AreEqual<string>("{{a}", ovformatNamed);
      string ovformat = observer.GetObservedValue<string>("format");
      Assert.AreEqual<string>("{{0}", ovformat);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(global::StringUtilsTest))]
public void FormatNamed917()
{
    using (IPexObserveContext observer = PexObserve.NewTest())
    {
      global::StringUtilsTest.FormatNamed("{", "{");
      string ovformatNamed = observer.GetObservedValue<string>("formatNamed");
      Assert.AreEqual<string>("{{a}{", ovformatNamed);
      string ovformat = observer.GetObservedValue<string>("format");
      Assert.AreEqual<string>("{{0}{", ovformat);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(global::StringUtilsTest))]
[PexRaisedException(typeof(PexAssertFailedException))]
public void FormatNamedThrowsPexAssertFailedException25()
{
    using (IPexObserveContext observer = PexObserve.NewTest())
    {
      global::StringUtilsTest.FormatNamed("}", "\0");
      string ovformatNamed = observer.GetObservedValue<string>("formatNamed");
      Assert.AreEqual<string>("}{a}\0", ovformatNamed);
      string ovformat = observer.GetObservedValue<string>("format");
      Assert.AreEqual<string>("}{0}\0", ovformat);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(global::StringUtilsTest))]
[PexRaisedException(typeof(PexAssertFailedException))]
public void FormatNamedThrowsPexAssertFailedException839()
{
    using (IPexObserveContext observer = PexObserve.NewTest())
    {
      global::StringUtilsTest.FormatNamed("}}", (string)null);
      string ovformatNamed = observer.GetObservedValue<string>("formatNamed");
      Assert.AreEqual<string>("}}{a}", ovformatNamed);
      string ovformat = observer.GetObservedValue<string>("format");
      Assert.AreEqual<string>("}}{0}", ovformat);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(global::StringUtilsTest))]
[PexRaisedException(typeof(PexAssertFailedException))]
public void FormatNamedThrowsPexAssertFailedException668()
{
    using (IPexObserveContext observer = PexObserve.NewTest())
    {
      global::StringUtilsTest.FormatNamed("}}", "}}");
      string ovformatNamed = observer.GetObservedValue<string>("formatNamed");
      Assert.AreEqual<string>("}}{a}}}", ovformatNamed);
      string ovformat = observer.GetObservedValue<string>("format");
      Assert.AreEqual<string>("}}{0}}}", ovformat);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(global::StringUtilsTest))]
[PexRaisedException(typeof(PexAssertFailedException))]
public void FormatNamedThrowsPexAssertFailedException252()
{
    using (IPexObserveContext observer = PexObserve.NewTest())
    {
      global::StringUtilsTest.FormatNamed("}{", "}{");
      string ovformatNamed = observer.GetObservedValue<string>("formatNamed");
      Assert.AreEqual<string>("}{{a}}{", ovformatNamed);
      string ovformat = observer.GetObservedValue<string>("format");
      Assert.AreEqual<string>("}{{0}}{", ovformat);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(global::StringUtilsTest))]
public void FormatNamed72()
{
    using (IPexObserveContext observer = PexObserve.NewTest())
    {
      global::StringUtilsTest.FormatNamed("{\0", (string)null);
      string ovformatNamed = observer.GetObservedValue<string>("formatNamed");
      Assert.AreEqual<string>("{\0{a}", ovformatNamed);
      string ovformat = observer.GetObservedValue<string>("format");
      Assert.AreEqual<string>("{\0{0}", ovformat);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(global::StringUtilsTest))]
public void FormatNamed2()
{
    using (IPexObserveContext observer = PexObserve.NewTest())
    {
      global::StringUtilsTest.FormatNamed("{,", (string)null);
      string ovformatNamed = observer.GetObservedValue<string>("formatNamed");
      Assert.AreEqual<string>("{,{a}", ovformatNamed);
      string ovformat = observer.GetObservedValue<string>("format");
      Assert.AreEqual<string>("{,{0}", ovformat);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(global::StringUtilsTest))]
public void FormatNamed557()
{
    using (IPexObserveContext observer = PexObserve.NewTest())
    {
      global::StringUtilsTest.FormatNamed("{\0{", (string)null);
      string ovformatNamed = observer.GetObservedValue<string>("formatNamed");
      Assert.AreEqual<string>("{\0{{a}", ovformatNamed);
      string ovformat = observer.GetObservedValue<string>("format");
      Assert.AreEqual<string>("{\0{{0}", ovformat);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(global::StringUtilsTest))]
public void FormatNamed466()
{
    using (IPexObserveContext observer = PexObserve.NewTest())
    {
      global::StringUtilsTest.FormatNamed("{\0{", "{\0{");
      string ovformatNamed = observer.GetObservedValue<string>("formatNamed");
      Assert.AreEqual<string>("{\0{{a}{\0{", ovformatNamed);
      string ovformat = observer.GetObservedValue<string>("format");
      Assert.AreEqual<string>("{\0{{0}{\0{", ovformat);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(global::StringUtilsTest))]
[PexRaisedException(typeof(PexAssertFailedException))]
public void FormatNamedThrowsPexAssertFailedException71()
{
    using (IPexObserveContext observer = PexObserve.NewTest())
    {
      global::StringUtilsTest.FormatNamed("{{", "{{");
      string ovformatNamed = observer.GetObservedValue<string>("formatNamed");
      Assert.AreEqual<string>("{{{a}{{", ovformatNamed);
      string ovformat = observer.GetObservedValue<string>("format");
      Assert.AreEqual<string>("{{{0}{{", ovformat);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(global::StringUtilsTest))]
public void FormatNamed61()
{
    using (IPexObserveContext observer = PexObserve.NewTest())
    {
      global::StringUtilsTest.FormatNamed("{:{", (string)null);
      string ovformatNamed = observer.GetObservedValue<string>("formatNamed");
      Assert.AreEqual<string>("{:{{a}", ovformatNamed);
      string ovformat = observer.GetObservedValue<string>("format");
      Assert.AreEqual<string>("{:{{0}", ovformat);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(global::StringUtilsTest))]
[PexRaisedException(typeof(PexAssertFailedException))]
public void FormatNamedThrowsPexAssertFailedException859()
{
    using (IPexObserveContext observer = PexObserve.NewTest())
    {
      global::StringUtilsTest.FormatNamed("{}", "{{");
      string ovformatNamed = observer.GetObservedValue<string>("formatNamed");
      Assert.AreEqual<string>("{}{a}{{", ovformatNamed);
      string ovformat = observer.GetObservedValue<string>("format");
      Assert.AreEqual<string>("{}{0}{{", ovformat);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(global::StringUtilsTest))]
public void FormatNamed574()
{
    using (IPexObserveContext observer = PexObserve.NewTest())
    {
      global::StringUtilsTest.FormatNamed("{\0:", "{\0\0");
      string ovformatNamed = observer.GetObservedValue<string>("formatNamed");
      Assert.AreEqual<string>("{\0:{a}{\0\0", ovformatNamed);
      string ovformat = observer.GetObservedValue<string>("format");
      Assert.AreEqual<string>("{\0:{0}{\0\0", ovformat);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(global::StringUtilsTest))]
public void FormatNamed768()
{
    using (IPexObserveContext observer = PexObserve.NewTest())
    {
      global::StringUtilsTest.FormatNamed((string)null, "{\0}");
      string ovformatNamed = observer.GetObservedValue<string>("formatNamed");
      Assert.AreEqual<string>("{a}{\0}", ovformatNamed);
      string ovformat = observer.GetObservedValue<string>("format");
      Assert.AreEqual<string>("{0}{\0}", ovformat);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(global::StringUtilsTest))]
public void FormatNamed145()
{
    using (IPexObserveContext observer = PexObserve.NewTest())
    {
      global::StringUtilsTest.FormatNamed("{\0{{", (string)null);
      string ovformatNamed = observer.GetObservedValue<string>("formatNamed");
      Assert.AreEqual<string>("{\0{{{a}", ovformatNamed);
      string ovformat = observer.GetObservedValue<string>("format");
      Assert.AreEqual<string>("{\0{{{0}", ovformat);
    }
}
}
